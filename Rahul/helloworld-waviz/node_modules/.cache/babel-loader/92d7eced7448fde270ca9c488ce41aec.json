{"ast":null,"code":"var _jsxFileName = \"D:\\\\waviz\\\\react-training\\\\Rahul\\\\helloworld-waviz\\\\src\\\\components\\\\Reset.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from \"react\";\nimport { Grid, Paper, Button, Typography } from '@material-ui/core';\nimport { TextField } from \"@material-ui/core\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from 'yup';\nimport { useHistory } from \"react-router-dom\";\nimport axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Reset = () => {\n  _s();\n\n  let history = useHistory();\n  const [registerError, setregisterError] = useState();\n  const paperStyle = {\n    padding: '40px 20px',\n    width: 300,\n    margin: '20px auto'\n  };\n  const btnStyle = {\n    marginTop: 10\n  };\n  const formStyle = {\n    height: \"auto\",\n    alignItems: \"baseline\"\n  };\n  const btncss = {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    width: \"100%\"\n  };\n  const passwordRegularExp = /^(?=.*?[A-Za-z])(?=.*[A-Z])(?=.*?[0-9]).{6,}$/;\n  const initialValues = {\n    password: '',\n    confirmPassword: ''\n  }; // validateSchema\n\n  const validateSchema = Yup.object().shape({\n    password: Yup.string().min(8, \"Min carrector should be 8\").matches(passwordRegularExp, \"Password must have uppercase,lovercase,number,special Symbol\").required(\"Required\"),\n    // confirmPassword\n    confirmPassword: Yup.string().oneOf([Yup.ref('password')], \"Password does not match\").min(8, \"Min carrector should be 8\").required(\"Required\")\n  }); // on submit funtion\n\n  const onSubmit = (values, props) => {\n    console.log(\"Registration Data :\", JSON.stringify(values), null, 2); // props.resetForm()\n\n    axios.post('http://localhost:3333/reset', values).then(function (response) {\n      if (response.status === 200 && response.data && response.data.messeage === \"success\") {\n        console.log(\"Success Response : \", response.data.messeage);\n        history.push(\"/login\");\n      } else {\n        setregisterError(true);\n      }\n\n      console.log(response);\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    children: /*#__PURE__*/_jsxDEV(Paper, {\n      elevation: 5,\n      style: paperStyle,\n      children: [/*#__PURE__*/_jsxDEV(Grid, {\n        align: \"center\",\n        children: [/*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"h6\",\n          children: \" Reset Password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          children: \" Type Your New Password \"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Formik, {\n        initialValues: initialValues,\n        validationSchema: validateSchema,\n        onSubmit: onSubmit,\n        children: props => /*#__PURE__*/_jsxDEV(Form, {\n          style: formStyle,\n          noValidate: true,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              textAlign: \"center\"\n            },\n            children: registerError ? /*#__PURE__*/_jsxDEV(\"p\", {\n              style: {\n                padding: \"10px\",\n                color: \"#f44336\"\n              },\n              children: [\" \", \"Please Fill all fileds Correctly\", \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 67,\n              columnNumber: 37\n            }, this) : null\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            as: TextField,\n            name: \"password\",\n            error: props.errors.password && props.touched.password,\n            label: \"Password\",\n            type: \"password\",\n            fullWidth: true,\n            helperText: /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"password\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 52\n            }, this),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 32\n          }, this), /*#__PURE__*/_jsxDEV(Field, {\n            as: TextField,\n            name: \"confirmPassword\",\n            error: props.errors.confirmPassword && props.touched.confirmPassword,\n            label: \"Confirm Password\",\n            type: \"password\",\n            fullWidth: true,\n            helperText: /*#__PURE__*/_jsxDEV(ErrorMessage, {\n              name: \"confirmPassword\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 86,\n              columnNumber: 52\n            }, this),\n            required: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 27\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: btncss,\n            children: /*#__PURE__*/_jsxDEV(Button, {\n              type: \"submit\",\n              style: btnStyle,\n              variant: \"contained\",\n              color: \"primary\",\n              children: \"Register\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Reset, \"Zwh5NtUNTPwhzXPNY9drFcKmXv4=\", false, function () {\n  return [useHistory];\n});\n\n_c = Reset;\nexport default Reset;\n\nvar _c;\n\n$RefreshReg$(_c, \"Reset\");","map":{"version":3,"sources":["D:/waviz/react-training/Rahul/helloworld-waviz/src/components/Reset.jsx"],"names":["React","useState","Grid","Paper","Button","Typography","TextField","Formik","Form","Field","ErrorMessage","Yup","useHistory","axios","Reset","history","registerError","setregisterError","paperStyle","padding","width","margin","btnStyle","marginTop","formStyle","height","alignItems","btncss","display","justifyContent","passwordRegularExp","initialValues","password","confirmPassword","validateSchema","object","shape","string","min","matches","required","oneOf","ref","onSubmit","values","props","console","log","JSON","stringify","post","then","response","status","data","messeage","push","textAlign","color","errors","touched"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Grid, Paper, Button, Typography } from '@material-ui/core';\nimport { TextField } from \"@material-ui/core\";\nimport { Formik, Form, Field, ErrorMessage } from \"formik\";\nimport * as Yup from 'yup'\nimport { useHistory } from \"react-router-dom\";\n\nimport axios from \"axios\";\n\n\nconst Reset = () => {\n    let history = useHistory();\n    const [registerError, setregisterError] = useState();\n    const paperStyle = { padding: '40px 20px', width: 300, margin: '20px auto' }\n    const btnStyle = { marginTop: 10 }\n    const formStyle = { height: \"auto\", alignItems:\"baseline\" }\n    const btncss = {display: \"flex\",\n        justifyContent: \"space-between\",\n        width: \"100%\",}\n    const passwordRegularExp = /^(?=.*?[A-Za-z])(?=.*[A-Z])(?=.*?[0-9]).{6,}$/\n    const initialValues = {\n        password: '',\n        confirmPassword:''\n    }\n    // validateSchema\n    const validateSchema=Yup.object().shape({\n          password:Yup.string().min(8,\"Min carrector should be 8\").matches(passwordRegularExp,\"Password must have uppercase,lovercase,number,special Symbol\").required(\"Required\"),\n        // confirmPassword\n        confirmPassword:Yup.string().oneOf([Yup.ref('password')],\"Password does not match\").min(8,\"Min carrector should be 8\").required(\"Required\")\n\n    })\n\n\n  \n\n\n    // on submit funtion\n    const onSubmit = (values, props) => {\n        console.log(\"Registration Data :\",JSON.stringify(values),null,2)\n        // props.resetForm()\n\n        axios.post('http://localhost:3333/reset', values)\n        .then(function (response) {\n\n             if (response.status === 200 && response.data && response.data.messeage === \"success\") {\n                 console.log(\"Success Response : \", response.data.messeage)\n                  history.push(\"/login\")\n             } else {\n                setregisterError(true)\n             }\n            console.log(response);\n        })\n    }\n    return (\n        <Grid>\n            <Paper elevation={5} style={paperStyle}>\n                <Grid align='center'>\n                    <Typography variant=\"h6\"> Reset Password</Typography>\n                    <Typography variant=\"caption\"> Type Your New Password </Typography>\n                </Grid>\n                <Formik initialValues={initialValues} validationSchema={validateSchema} onSubmit={onSubmit}>\n                    {(props) => (\n                        <Form style={formStyle} noValidate>\n                        {/* {console.log(props)} */}\n                        <div style={{ textAlign: \"center\" }}>\n                                {registerError ? (\n                                    <p\n                                        style={{\n                                            padding: \"10px\",\n                                            color: \"#f44336\",\n                                        }}\n                                    >\n                                        {\" \"}\n                                        Please Fill all fileds Correctly{\" \"}\n                                    </p>\n                                ) : null}\n                            </div>\n\n                               {/* password */}\n\n                               <Field as={TextField} name=\"password\" error={props.errors.password&&props.touched.password} label=\"Password\" type=\"password\" \n                            fullWidth  helperText={<ErrorMessage name='password'  /> } required/>\n                             {/* password */}\n                             \n                          <Field as={TextField} name=\"confirmPassword\" error={props.errors.confirmPassword&&props.touched.confirmPassword} label=\"Confirm Password\" type=\"password\" \n                            fullWidth  helperText={<ErrorMessage name='confirmPassword'  /> } required/>\n\n                            {/* button */}\n                            <div style={btncss} >\n                            <Button type=\"submit\" style={btnStyle} variant='contained' color='primary' >\n                                Register\n                            </Button>\n                            </div>\n                        </Form>\n                    )}\n                </Formik>\n            </Paper>\n        </Grid>\n    )\n}\nexport default Reset;"]},"metadata":{},"sourceType":"module"}